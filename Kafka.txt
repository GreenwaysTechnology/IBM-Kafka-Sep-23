				Kafka
.....................................................................................
Learning Track:
...............

1.Introduction to kafka 
2.Kafka Architecture
3.Kafka Programming using cli
4.Producers and Consumers
5.Kafka Connect
6.Kafka Streams using KsqlDB

Note: we dont use any programming language to connect to produce and consume kafka messages.

What is Kafka?


Data is every thing;
///////////////////

Every Enterprise is powered by data.

We take information in, analyze it, manipulate it and creates more as output.

Every application creates data, whether it is log messages,metrics,user activity,out going messages, or something else.

Every byte of data has a story to tell, something of imporatance that will inform the next thing to be done.

In order to know what that is, we need to get the data from where it is created to where it can be analyzed.

We see this every day on websites like amazon,youtube,facebook, where our "clicks" on on items of interest to use are turned into recommmendations that are shown to us litte later.

The faster we can do this, the more agile and resonsive our organizations can be.
The less effort we spend on moving data around, the more we can focus on the core business at hand.
....................................................................................
			Publish and Subscribe Messaging (data):
...................................................................................

Before discussing the Apache Kafka , it is imporant for us to understand the concept of pub/sub messaging and why it is important.

Pub and sub messaging is  a pattern that is characterized by the sender(publisher) of a piece of data (message) not spcificially directing to a reciver, Instead, the publisher classifies the message somewhat, and that receiver(subscriber) subscribes to receive certain of classes of messages.

Pub /Sub systems often have a broker, a central point where messages are published , to facilite this.
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
.....................................................................................
			  How enterprise systems handles data
			             (Pre Kafka)
....................................................................................


Many use cases for pub/sub starts with same way.

   With a simple message queue or interprocess communication channel

for eg, you create an application that needs to send montioring information somewhere. How do you send?

You write monitoring message in a direct connection from your application to an application that displays your metrics on a dashboard, push metrics over that connection.

let us say, you have systems, that system has two servers - frontend server,
back end server

both server sends metrics data to metrics server

		 FrontEnd                 BackEnd Server
		  Server
		    |				|
		    |				|
		--------------------------------------
				|
			    Mertics Server

If your server is running in clustered env

		FrontEnd               FrontEnd Server
		  Server
		    |				|
		    |				|
		--------------------------------------
				|
			    Mertics Server


		 Backend               Backend Server
		  Server
		    |				|
		    |				|
		--------------------------------------
				|
			    Mertics Server



A single , direct metric servers irresptive of how many backend and front end server

This looks a simple soultion to a problem that works when you are going to getting started with monitoring.

Before long,you decide you would like to analyze your metircs over a longer term,
that doesnot work very well in dashboard.

When you introduce new service in your biz and where you have to introduce server,
Now you have three more apps, that generating metrics data ,then metrics server need connect directly , recive,store,anaylze

..............................................................................
			Many Metrics publisher, using direct connections
.....................................................................................

 FrontEnd server  Database Server  Chat server  Mail Server PaymentServer
         |            |                |           |            |
-----------------------------------------------------------------------
                                |
			   publish metrics
				|
			    Metric Server


Here all publisher are publishing "directly" metics to Metrics Servers.

       "What if i want to store front data ,database data,back end data separatly"

....................................................................................
			Loosly Coupled Metric publisher and Server
		         Introduction of Pub/Sub Messing System
...................................................................................

 FrontEnd server  Database Server  Chat server  Mail Server PaymentServer
         |            |                |           |            |
-----------------------------------------------------------------------
                                |
			   publish metrics
				 |
			      Metrics
			      Sub/Pub
				|
			    Metric Server

Every Pub sub system is going to store messages inside "Queue" , the basic data storage model.
In the above system we have only one /Single /Individual Queue System.

Image one of your coworkers has been doing similar work with log messages, another has been working on tracking user behavior on the frontend website and providing that information to developers who are working on machine learning,
As well as creating some reports for management.

...................................................................................
			 Multi Pub Sub Systems
...................................................................................

FrontEnd server  Database Server  Chat server  Mail Server PaymentServer 
         |            |                |           |            |
-----------------------------------------------------------------------
                                |

Metrics     Logging              Tracking
Pub/Sub     Pub/Sub              Pub/Sub
  |           |                    |
Metric    ---------             ----------       
Server    |       |                |
        Secuirty Log Search      MachingLearning 
	Analysis Server		 and AI server
         

Now at last , we have refactored our system, but there is lot of "Duplication"
Your company is maintaining multiple systems for queuing data, all of which have their own individual bugs and limitations.
You will have more systems in future it will come.
..................................................................................
....................................................................................
			Birth of Kafka :Entering into Kafka
....................................................................................	
Apache Kafka is pub/sub messaging system designed to solve the above problem.
Instead of having multiple  Queue System, we can have only one System where we receive message,organize the message,store,process,and produce the report.

Traditional Messaging Systems:
..............................

Traditional Messaging systems are built based on the standards like "AMQP" protocal.
Any pub/sub messaging product like rabbit mq is built on the standards only.

According to the AMQP Standards.
 
1.Messages are stored in a queue
2.Queue stores messages which is tranisent by default. if you want you can persit in disk.
3.The messages can be altered(update,delete)
4.The messages are deleted once it is consumed

	"Kafka was not designed based on Traditional Messaging System"
	 "Kafka was not designed based on AMQP Protocal Specification"


Kafka inspired from "Logging System" or Loggers to store messages, instead of storing message in traditional messaging systems.

 		"Kafka was designed based on  Loggers"
	

What is Log?
   Tracking activites of an application,store those activites in "memory or in  a disk file" in order to analyze them in furture.

If you are developer, you encounter loggers every day in your development cycle.

Logs gives complete information about the system which is running.


if you are java developer, you might have used various logging implementations.
We call as "Logging Frameworks"

Log gives just information about "what just happened or happing" in your system for eg
some warings,some info,some bugs, some tracking , some tracing..........

Logs :
2016-06-16 17:02:13 TRACE Trace log message
2016-06-16 17:02:13 DEBUG Debug log message
2016-06-16 17:02:13 INFO  Info log message
2016-06-16 17:02:13 ERROR Error log message

.....................................................................................
			 Log structure and its characteristics
.....................................................................................

Log information is stored in a file called "Log file" - system.log
Log file is used for future analytics such as debugging,finding warnings,errors...


What is difference between "normal files" and log files?

=>Log files are "append only", you cant add any new entry in between, which makes the file "immutable" - cant be edited or read only.

=>Normal files are based on "Edit Mode" or Replace mode
    Files are edited or replaced later.

  		"Kafka is just based on Log System"
		      Kafka is just Logger System

    Since kafka is logger system is it same as "Slf4j,log4j" Kind of loggers.

Some what yes, but Kafka is more beyond that....

	    Kafka is not based on "traditional log files" 

Kafka is fundmentally based on "Commit Logs"

What is commit log?
    "In data management platforms, a commit is making set of tenative changes permanent".
    "Making the end of a transaction and providing Durablity to ACID transactions"
  The record of commits is called "Commit log"

What Kafka is going to record into commit log?
     Kafka was designed to store informations(data).

What type of information?
  Any type of information we can store into commit log.
		.....................................................................................
			  Event
....................................................................................
What is Event?
   An Event is any type of action,incident,or change are "happening" or "just happened"
for eg:
  Now i am typing,Now i am teaching - happening
  Just i had coffee,Just i received mail, just i clicked a link, just i searched product - happened.

 "An Event is just remainder or notification of  your happenings or happened"
...................................................................................
		     Event Driven Architecture(Software system)
....................................................................................

The Software system can track what is happening, just happended , stores into a file called commit log, later that commit log can be replayed to process those events to produce various reports

			    FronEnd Server
				|
			  What is happening or happened
			 (User has clicked  "iphone 15 link") - event
				|
			   store userclick event into log file
				|
			     Kafka 
				|
			    events.log
				17-07-2023 3:48:59  iphone 15 link
				17-07-2023 3:49:58  dell lap top link



Let us imagine, You have mobile apps, which tracks your locations where ever you move, those locations are recorded into a file by "Event Driven System"(Kafka).
Based on those data , you can get report like that where were you at morning,afternoon,evening...

Eg:
 Today stock price is $40 at 10Am
 I met my friend yesterday at east coast road
 Made payment of $500 to Ramesh

Imgaine i need  somebody or somthing should record every activity of my life from the early moring when i get up and till bed.

  There is a system to record every events of your life that is called 
			      Kafka

	 Kafka is Event Processing Software , which stores and process events

.....................................................................................
			Kafka Basic  Architecture
.....................................................................................

How kafka has been implemented?

   "Kafka is a software"
   "Kafka is a file(Commit log file) processing software
   "Kafka is written in java and scala" - Kafka is just java application
   "In order to run Kafka we need JVM"

How event is represented into kafka?

	Event is just a message.
        Every message has its own arch.
        In Kafka the Event/Message is called as "Record".
		Event(Record)


Event Contains Two things:
..........................
1.What happened/Happing - Name of the Event
2.State - Data

State:
......
  The state is nothing but data.

State Representation:

 In General state(data) is stored in relational databases "as table"
 A table represents the state of something like 
    User - id,name,email,password,city

Since User data can be stored and proceed into tables.

Can we store events into table?
   Events also has state like things(user,customer,product) in real time.

We can but not all types of events into table.
.....................................................................................
			    Modern Data Modeling
.....................................................................................
     Generally domains are modeled based on "Things(Customer,Order,Payment) first"
	  Now a days People started thinking based on Events first
          Instead of storing things into database , we store events

Events also has some state like "Things"

   "Events has some description of what happened with it", but Primary idea is that          event is indication in time that thing took place".

How to store events?
   Logs - Log is structured and the sequence  of the evnets occured in the method calls.

According to Kafka Official Definition:

	"Apache Kafka is an open source distributed streaming system used for stream 	processing, real-data time pipelines, and data integration at scale"
...................................................................................

....................................................................................
			 kafka Distribution - Kafka Setup
...................................................................................

Kafka was orginally created by "Jay kreps,Neha,Jun Rao" at Linkedin to solve the problems of distributed "Pub/Sub" Message system.

Once the Kafka was ready, Kafka Creators wanted to open source, who released the Kafka under "Apache license" early 2011.

After Kafka relase it become very popular, later Jay ,Neha ,Jun Rao started the company called "Confluent".

Confluent then took Apache Kakfa as a core and who built various production ready tools, support, cloud integration


Kafka distribution:
 Kafka is available in two distribution

1.Apache Kafka
   It is open source version of kafka 

2.Confluent Kafka
   It is abstraction of apache kafka, Commericial version of apache kafka


Apache kafka vs confluent kafka
https://www.confluent.io/apache-kafka-vs-confluent/


Platforms:

Kafka can be installed any platform

1.Bare metal machines
  Kafka is available for all operating system.

1.Windows - may be good for basic use cases
2.Linux - recommended for advanced use cases
3.mac - recommended for advanced use cases

2.VM env
  You  can setup kafka on any industry standard VMS - oracle virtual box

3.Container based distributed: - docker and kubernetes
   It is recommened in development env and also can be used in prod


We are going to setup:

Apache Kafka | confluent Kafka
1.Linux - bare metal machine
2.Docker - Container


Lab setup:

1.setup linux:
..............

Linux: Ubuntu 20.x

sudo apt get-update

sudo apt get-upgrade

1.java 

jdk 11.

sudo apt install openjdk-11-jdk -y

....................................................................................

Setting up Kafka:


1.Apache Kafka -https://kafka.apache.org/
  =>Source distribution
	-you can build from the source
  =>Binary distribution
        -you can download already built folder


Download link:
https://downloads.apache.org/kafka
https://archive.apache.org/dist/kafka
 

wget https://downloads.apache.org/kafka/3.5.1/kafka_2.13-3.5.1.tgz 

tar -xzf  kafka_2.13-3.5.1.tgz


subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0$ ls -l
total 64
-rw-r--r-- 1 subu subu 14770 Jun  5 14:33 LICENSE
-rw-r--r-- 1 subu subu 28184 Jun  5 14:33 NOTICE
drwxr-xr-x 3 subu subu  4096 Jun  5 14:38 bin
drwxr-xr-x 3 subu subu  4096 Jun  5 14:38 config
drwxr-xr-x 2 subu subu  4096 Jul 18 14:47 libs
drwxr-xr-x 2 subu subu  4096 Jun  5 14:38 licenses
drwxr-xr-x 2 subu subu  4096 Jun  5 14:38 site-docs

Folder structures
libs:
  contains all jar files neccessary to run kafka.
bin;
 contains the shell script files to run kafka servers and all cli
 contains windows folder.

bin/windows
  contains the batch files to run kafka in windows env.

config;
  contains all configuration files related to kafka server,zookeeper.....
.....................................................................................

			Core concepts of Kafka
.....................................................................................

Broker:
.......
   Since Kafka is a java program which is deployed on JVM,Kafka runs on the JVM Which is process.
   The JVM is other wise called as "Kafka Broker or Kafka Server"

.....................................................................................
			 Types of Kafka Broker
.....................................................................................

Kafka has been designed based on "Distributed Architecture" - By Default Kafka is distributed.

General Characteritics of Disbutributed Architecture:
.....................................................

1.Scalablity
    Running more than one process,hosting the same app. Running the same app on    multiple servers.

Cluster:
  When we scale apps into multiple servers, we need to group them under a single unit.
  Group of machines are called as "cluster"

2.High Availablity:
   if any one server fails in the cluster, clients should not be affected, we need to make our app always available.
   How to make highly available?
      Via cluster

         In kafka we can run "Multiple Brokers" as a cluter.

  Kafka cluster can be in the same machine or across machines in network.
.....................................................................................
			Cluster and Distributed Arch
.....................................................................................

1.Cluster Manager - Control Plane -  Where cluster information is stored
2.Data Plane  - Where User data is stored

.....................................................................................
			   Cluster Manager
.....................................................................................

In any distributed arch, if machines are running in a cluster or clusters , the cluster need to be mananged.

Who can manage cluster?
   Cluster Manager.

Kafka and cluster Manager:
  Kafka is distributed, runs in a cluster, we need to manage that cluster.

Kafka provides cluster manager
  =>ZooKeeper - It is distributed cluster manager software
  =>KRaft -  it is new cluster manager inside Kafka cluster.

if you run single broker or multiple brokers we need to have cluster manager.

1.Apache Zookeeper:
	ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. 

2.Apache KRaft:
    KRaft is consenus protocal that was introduced to replace ZooKeeper for meta data management

Roles of Cluster Managers:
1.To manage cluster
2.Failures detections and recovery
3.Storing ACL and secrets


Lab 2:
 How to setup Apache Kafka Cluster.
 
Single Broker , Single zookeeper.

Step 1:
 Start zookeeper

Note: before starting zookeeper or broker we need to pass "respective config files" as parameter 

zookeeper:
 Has a config file called config/zookeeper.properties

dataDir=/tmp/zookeeper
    The directory where the snapshot of cluster information is stored.

clientPort=2181
  The Port at which clients connect , 
  who is client? Kafka Broker is client.

Any server if you want to start we need to use "script files" which is inside bin folder

$./bin/zookeeper-server-start.sh  config/zookeeper.properties

Step 2:
  After running zookeeper,we need start broker

in order to start kafka broker we need to supply server.properties file...

broker.id=0
 Each Broker is identified uniquely in the cluster

log.dirs=/tmp/kafka-logs
  Location of event log files....

zookeeper.connect=localhost:2181
  The current broker is connected with zookeeper and its host and port.

kafka_2.13-3.5.0$ ./bin/kafka-server-start.sh config/server.properties

Without "cluster manager either zookeeper or kraft" , we cant start broker.
.....................................................................................
			      Topics
.....................................................................................
What is Topic?
  There are lot of events, we need to organize them in the system.
  Apach Kafka's most fundamental unit of organization is the topic.

  Topic is just like tables in the relational database.

  As we discussed already, Kafka just stores in events in the log files.

  We never writes events into log file directly

  As a developer we capture events, write them into "topic",Kafka writes events into    log file from the topic.

  A topic is log of events,logs are easy to understand

  Topic is just simple datastructure with well known semantics, They are append only.

  When ever you write a  message, it always goes on the end

  When you read message from the logs by "Seeking offset in the log"

  Logs are fundamental durable things,Traditional Messaging systems have topics and     queues which store messages temporarily to buffer them between source and      designation.

  Since topics are logs , which always permenant.
  
  You can delete log files not log messages.

  You can store logs as short as to as long as years or even retain message     indefinitely.

.....................................................................................
			How to create topics
.....................................................................................

In order to create topic, we need somebody to create topic.


Actors In kafka Systems:
........................

1.Producer
   The Producer is a program whose responsability to capture events,and send events to Kafka broker.
   Producer will publish events into topic.
2.Consumer
 The Consumer is a program whose responsability to read events from the topic

Producer and consumers can be written any programming language which supports kafka integration.

Producers can be java program or node.js program or python or c#
Consumer can be java program or node.js program or python or c#

Other than programming languages , Kafka supports cli tools.

.....................................................................................
			 kafka-topics.sh
....................................................................................

This is a cli tool used to create,delete,describe, or update the topic.

Lab : How to create topic

1.Explore help how to use topics tool


./bin/kafka-topics.sh --help
This tool helps to create, delete, describe, or change a topic.
Option                                   Description
------                                   -----------
--alter                                  Alter the number of partitions and
                                           replica assignment. Update the
                                           configuration of an existing topic
                                           via --alter is no longer supported
                                           here (the kafka-configs CLI supports
                                           altering topic configs with a --
                                           bootstrap-server option).
--at-min-isr-partitions                  if set when describing topics, only
                                           show partitions whose isr count is
                                           equal to the configured minimum.
--bootstrap-server <String: server to    REQUIRED: The Kafka server to connect
  connect to>                              to.
--command-config <String: command        Property file containing configs to be
  config property file>                    passed to Admin Client. This is used
                                           only with --bootstrap-server option
                                           for describing and altering broker
                                           configs.
--config <String: name=value>            A topic configuration override for the
                                           topic being created or altered. The
                                           following is a list of valid
                                           configurations:
                                                cleanup.policy
                                                compression.type
                                                delete.retention.ms
                                                file.delete.delay.ms
                                                flush.messages
                                                flush.ms
                                                follower.replication.throttled.
                                           replicas
                                                index.interval.bytes
                                                leader.replication.throttled.replicas
                                                local.retention.bytes
                                                local.retention.ms
                                                max.compaction.lag.ms
                                                max.message.bytes
                                                message.downconversion.enable
                                                message.format.version
                                                message.timestamp.difference.max.ms
                                                message.timestamp.type
                                                min.cleanable.dirty.ratio
                                                min.compaction.lag.ms
                                                min.insync.replicas
                                                preallocate
                                                remote.storage.enable
                                                retention.bytes
                                                retention.ms
                                                segment.bytes
                                                segment.index.bytes
                                                segment.jitter.ms
                                                segment.ms
                                                unclean.leader.election.enable
                                         See the Kafka documentation for full
                                           details on the topic configs. It is
                                           supported only in combination with --
                                           create if --bootstrap-server option
                                           is used (the kafka-configs CLI
                                           supports altering topic configs with
                                           a --bootstrap-server option).
--create                                 Create a new topic.
--delete                                 Delete a topic
--delete-config <String: name>           A topic configuration override to be
                                           removed for an existing topic (see
                                           the list of configurations under the
                                           --config option). Not supported with
                                           the --bootstrap-server option.
--describe                               List details for the given topics.
--exclude-internal                       exclude internal topics when running
                                           list or describe command. The
                                           internal topics will be listed by
                                           default
--help                                   Print usage information.
--if-exists                              if set when altering or deleting or
                                           describing topics, the action will
                                           only execute if the topic exists.
--if-not-exists                          if set when creating topics, the
                                           action will only execute if the
                                           topic does not already exist.
--list                                   List all available topics.
--partitions <Integer: # of partitions>  The number of partitions for the topic
                                           being created or altered (WARNING:
                                           If partitions are increased for a
                                           topic that has a key, the partition
                                           logic or ordering of the messages
                                           will be affected). If not supplied
                                           for create, defaults to the cluster
                                           default.
--replica-assignment <String:            A list of manual partition-to-broker
  broker_id_for_part1_replica1 :           assignments for the topic being
  broker_id_for_part1_replica2 ,           created or altered.
  broker_id_for_part2_replica1 :
  broker_id_for_part2_replica2 , ...>
--replication-factor <Integer:           The replication factor for each
  replication factor>                      partition in the topic being
                                           created. If not supplied, defaults
                                           to the cluster default.
--topic <String: topic>                  The topic to create, alter, describe
                                           or delete. It also accepts a regular
                                           expression, except for --create
                                           option. Put topic name in double
                                           quotes and use the '\' prefix to
                                           escape regular expression symbols; e.
                                           g. "test\.topic".
--topic-id <String: topic-id>            The topic-id to describe.This is used
                                           only with --bootstrap-server option
                                           for describing topics.
--topics-with-overrides                  if set when describing topics, only
                                           show topics that have overridden
                                           configs
--unavailable-partitions                 if set when describing topics, only
                                           show partitions whose leader is not
                                           available
--under-min-isr-partitions               if set when describing topics, only
                                           show partitions whose isr count is
                                           less than the configured minimum.
--under-replicated-partitions            if set when describing topics, only
                                           show under replicated partitions
--version                                Display Kafka version.



Create new Topic:

~/kafka_2.13-3.5.0$ ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic todos-topic
Created topic todos-topic.
After creating topic, you can explore log file location.

/tmp/kafka-logs
       |
     todos-topic-0

when you create a topic, which is represented inside disk as "folder"

todos-topic-0
   |        | 
 Topic Name Partition id
....................................................................................
		How to look at the topic structure
.....................................................................................

--describe --topic todos-topic

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic todos-topic


Topic: todos-topic      TopicId: 6GPbDzT7RxyFcNYdcRRsLQ PartitionCount: 1       ReplicationFactor: 1  
 Configs:
      Topic: todos-topic      Partition: 0    Leader: 0       Replicas: 0     Isr: 0

....................................................................................
			How to delete the topic
....................................................................................

--delete --topic todos-topic

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic todos-topic

once the delete command is executed, the topic is renamed rather it wont delete from the disk permanently.
....................................................................................
			  
.....................................................................................
		   How to publish message/event/record into kafka Topic
.....................................................................................
in order to publish message/event/record we need publisher, publisher could be any program, we are going to use cli to publish message.

./bin/kafka-console-producer.sh --help
This tool helps to read data from standard input and publish it to Kafka.
Option                                   Description
------                                   -----------
--batch-size <Integer: size>             Number of messages to send in a single
                                           batch if they are not being sent
                                           synchronously. please note that this
                                           option will be replaced if max-
                                           partition-memory-bytes is also set
                                           (default: 16384)
--bootstrap-server <String: server to    REQUIRED unless --broker-list
  connect to>                              (deprecated) is specified. The server
                                           (s) to connect to. The broker list
                                           string in the form HOST1:PORT1,HOST2:
                                           PORT2.
--broker-list <String: broker-list>      DEPRECATED, use --bootstrap-server
                                           instead; ignored if --bootstrap-
                                           server is specified.  The broker
                                           list string in the form HOST1:PORT1,
                                           HOST2:PORT2.
--compression-codec [String:             The compression codec: either 'none',
  compression-codec]                       'gzip', 'snappy', 'lz4', or 'zstd'.
                                           If specified without value, then it
                                           defaults to 'gzip'
--help                                   Print usage information.
--line-reader <String: reader_class>     The class name of the class to use for
                                           reading lines from standard in. By
                                           default each line is read as a
                                           separate message. (default: kafka.
                                           tools.
                                           ConsoleProducer$LineMessageReader)
--max-block-ms <Long: max block on       The max time that the producer will
  send>                                    block for during a send request.
                                           (default: 60000)
--max-memory-bytes <Long: total memory   The total memory used by the producer
  in bytes>                                to buffer records waiting to be sent
                                           to the server. This is the option to
                                           control `buffer.memory` in producer
                                           configs. (default: 33554432)
--max-partition-memory-bytes <Integer:   The buffer size allocated for a
  memory in bytes per partition>           partition. When records are received
                                           which are smaller than this size the
                                           producer will attempt to
                                           optimistically group them together
                                           until this size is reached. This is
                                           the option to control `batch.size`
                                           in producer configs. (default: 16384)
--message-send-max-retries <Integer>     Brokers can fail receiving the message
                                           for multiple reasons, and being
                                           unavailable transiently is just one
                                           of them. This property specifies the
                                           number of retries before the
                                           producer give up and drop this
                                           message. This is the option to
                                           control `retries` in producer
                                           configs. (default: 3)
--metadata-expiry-ms <Long: metadata     The period of time in milliseconds
  expiration interval>                     after which we force a refresh of
                                           metadata even if we haven't seen any
                                           leadership changes. This is the
                                           option to control `metadata.max.age.
                                           ms` in producer configs. (default:
                                           300000)
--producer-property <String:             A mechanism to pass user-defined
  producer_prop>                           properties in the form key=value to
                                           the producer.
--producer.config <String: config file>  Producer config properties file. Note
                                           that [producer-property] takes
                                           precedence over this config.
--property <String: prop>                A mechanism to pass user-defined
                                           properties in the form key=value to
                                           the message reader. This allows
                                           custom configuration for a user-
                                           defined message reader.
                                         Default properties include:
                                          parse.key=false
                                          parse.headers=false
                                          ignore.error=false
                                          key.separator=\t
                                          headers.delimiter=\t
                                          headers.separator=,
                                          headers.key.separator=:
                                          null.marker=   When set, any fields
                                           (key, value and headers) equal to
                                           this will be replaced by null
                                         Default parsing pattern when:
                                          parse.headers=true and parse.key=true:
                                           "h1:v1,h2:v2...\tkey\tvalue"
                                          parse.key=true:
                                           "key\tvalue"
                                          parse.headers=true:
                                           "h1:v1,h2:v2...\tvalue"
--reader-config <String: config file>    Config properties file for the message
                                           reader. Note that [property] takes
                                           precedence over this config.
--request-required-acks <String:         The required `acks` of the producer
  request required acks>                   requests (default: -1)
--request-timeout-ms <Integer: request   The ack timeout of the producer
  timeout ms>                              requests. Value must be non-negative
                                           and non-zero. (default: 1500)
--retry-backoff-ms <Long>                Before each retry, the producer
                                           refreshes the metadata of relevant
                                           topics. Since leader election takes
                                           a bit of time, this property
                                           specifies the amount of time that
                                           the producer waits before refreshing
                                           the metadata. This is the option to
                                           control `retry.backoff.ms` in
                                           producer configs. (default: 100)
--socket-buffer-size <Integer: size>     The size of the tcp RECV size. This is
                                           the option to control `send.buffer.
                                           bytes` in producer configs.
                                           (default: 102400)
--sync                                   If set message send requests to the
                                           brokers are synchronously, one at a
                                           time as they arrive.
--timeout <Long: timeout_ms>             If set and the producer is running in
                                           asynchronous mode, this gives the
                                           maximum amount of time a message
                                           will queue awaiting sufficient batch
                                           size. The value is given in ms. This
                                           is the option to control `linger.ms`
                                           in producer configs. (default: 1000)
--topic <String: topic>                  REQUIRED: The topic id to produce
                                           messages to.
--version                                Display Kafka version.



How to publish events?
./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic todos-topic
>Learn Kafka
>Learn Event Driven Architecture
>^Cs
.....................................................................................
				Consumers
....................................................................................
Consumers are going to read data from the topics.

Steps:
=>Find a topic name eg todos-topic
=>Find host name and port eg localhost:9092
=>if you  want to read future message(Current Message being published
=>if you want to read histrical message , from the begining.
./bin/kafka-console-consumer.sh --help
This tool helps to read data from Kafka topics and outputs it to standard output.
Option                                   Description
------                                   -----------
--bootstrap-server <String: server to    REQUIRED: The server(s) to connect to.
  connect to>
--consumer-property <String:             A mechanism to pass user-defined
  consumer_prop>                           properties in the form key=value to
                                           the consumer.
--consumer.config <String: config file>  Consumer config properties file. Note
                                           that [consumer-property] takes
                                           precedence over this config.
--enable-systest-events                  Log lifecycle events of the consumer
                                           in addition to logging consumed
                                           messages. (This is specific for
                                           system tests.)
--formatter <String: class>              The name of a class to use for
                                           formatting kafka messages for
                                           display. (default: kafka.tools.
                                           DefaultMessageFormatter)
--formatter-config <String: config       Config properties file to initialize
  file>                                    the message formatter. Note that
                                           [property] takes precedence over
                                           this config.
--from-beginning                         If the consumer does not already have
                                           an established offset to consume
                                           from, start with the earliest
                                           message present in the log rather
                                           than the latest message.
--group <String: consumer group id>      The consumer group id of the consumer.
--help                                   Print usage information.
--include <String: Java regex (String)>  Regular expression specifying list of
                                           topics to include for consumption.
--isolation-level <String>               Set to read_committed in order to
                                           filter out transactional messages
                                           which are not committed. Set to
                                           read_uncommitted to read all
                                           messages. (default: read_uncommitted)
--key-deserializer <String:
  deserializer for key>
--max-messages <Integer: num_messages>   The maximum number of messages to
                                           consume before exiting. If not set,
                                           consumption is continual.
--offset <String: consume offset>        The offset to consume from (a non-
                                           negative number), or 'earliest'
                                           which means from beginning, or
                                           'latest' which means from end
                                           (default: latest)
--partition <Integer: partition>         The partition to consume from.
                                           Consumption starts from the end of
                                           the partition unless '--offset' is
                                           specified.
--property <String: prop>                The properties to initialize the
                                           message formatter. Default
                                           properties include:
                                          print.timestamp=true|false
                                          print.key=true|false
                                          print.offset=true|false
                                          print.partition=true|false
                                          print.headers=true|false
                                          print.value=true|false
                                          key.separator=<key.separator>
                                          line.separator=<line.separator>
                                          headers.separator=<line.separator>
                                          null.literal=<null.literal>
                                          key.deserializer=<key.deserializer>
                                          value.deserializer=<value.
                                           deserializer>
                                          header.deserializer=<header.
                                           deserializer>
                                         Users can also pass in customized
                                           properties for their formatter; more
                                           specifically, users can pass in
                                           properties keyed with 'key.
                                           deserializer.', 'value.
                                           deserializer.' and 'headers.
                                           deserializer.' prefixes to configure
                                           their deserializers.
--skip-message-on-error                  If there is an error when processing a
                                           message, skip it instead of halt.
--timeout-ms <Integer: timeout_ms>       If specified, exit if no message is
                                           available for consumption for the
                                           specified interval.
--topic <String: topic>                  The topic to consume on.
--value-deserializer <String:
  deserializer for values>
--version                                Display Kafka version.
--whitelist <String: Java regex          DEPRECATED, use --include instead;
  (String)>                                ignored if --include specified.
                                           Regular expression specifying list
                                           of topics to include for consumption.

This tool helps to read data from Kafka topics and outputs it to standard output.

How to consume lastest message?

./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todos-topic

- It is waiting for lastest message being published by producer.

Lab:
steps:
1.start producer and publish message
./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic todos-topic
>How are you Kafka?
2.start consumer and consume the message which is being published
 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todos-topic
How are you Kafka?



How to consume all the messages from the topic?
./bin/kafka-console-consumer.sh  --bootstrap-server localhost:9092 --topic todos-topic --from-beginning
Learn Kafka
Learn Event Driven Architecture
Learn Kafka streams
Learn Kafka connect
Learn Kafka RestProxy
...................................................................................
		 How to create topic via producer and publish event
....................................................................................

Kafka provides a default feature, producer can create topic and start publishing messages.

./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic order-topic
>i have ordered iphone 15
[2023-07-18 17:37:47,863] WARN [Producer clientId=console-producer] Error while fetching metadata with correlation id 4 : {order-topic=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)
>I have ordered new dress



./bin/kafka-console-consumer.sh  --bootstrap-server localhost:9092 --topic order-topic --from-beginning
i have ordered iphone 15
I have ordered new dress

.....................................................................................
			Basic Property Configuration
.....................................................................................
property option will gives meta or detailed information about messages and topics


--property <String: prop>                The properties to initialize the
                                           message formatter. Default
                                           properties include:
                                          print.timestamp=true|false
                                          print.key=true|false
                                          print.offset=true|false
                                          print.partition=true|false
                                          print.headers=true|false
                                          print.value=true|false
                                          key.separator=<key.separator>
                                          line.separator=<line.separator>
                                          headers.separator=<line.separator>
                                          null.literal=<null.literal>
                                          key.deserializer=<key.deserializer>
                                          value.deserializer=<value.
                                           deserializer>
                                          header.deserializer=<header.
                                           deserializer>
                                         Users can also pass in customized
                                           properties for their formatter; more
                                           specifically, users can pass in
                                           properties keyed with 'key.
                                           deserializer.', 'value.
                                           deserializer.' and 'headers.
                                           deserializer.' prefixes to configure
                                           their deserializers.


Time Stamp Property:
....................
./bin/kafka-console-consumer.sh  --bootstrap-server localhost:9092 --topic order-topic --from-beginning --property print.timestamp=true
CreateTime:1689682067965        i have ordered iphone 15
CreateTime:1689682092189        I have ordered new dress
CreateTime:1689682397605        I have ordered fruits


Lab:
How to start Kafka server in  -daemon mode?

./bin/zookeeper-server-start.sh -daemon  config/zookeeper.properties
./bin/kafka-server-start.sh -daemon  config/server.propertie
.....................................................................................
			.....................................................................................
			Log Retention
.....................................................................................

By default , events(messages) are stored into topic, topic finally persits into log file.

Can i delete events from the log file?
 No, Kafka log messages/events are immutable - readonly.

can i delete log files?
  Yes you can delete log files.

if you delete log files , you configure policies which is called as "Log Rentention Policy"

Log Retention policy can be set "Broker Level" or "Topic Level"

If you set policy at broker level, which is applied to all topics which are created inside broker.

you can set policy at topic level, which is applied to only that topic only.

Broker Level Configuration:
...........................
The policy can  be set to delete log file after "a period of time", or after "a given size has accumulated".

Period of time :
  I want to delete log files after 7 days, 7 months, 7 weeks, 7 years,7 mins,7 sec,7 ms
A Given size accumulated:
   i want to delete log files once the file size reaches 1gb
   You have to set value in bytes
   The value must be postive integer
   if you set -1, meaning that no limit on size 


Time based configuration:

log.retention.hours=168 
   By default 7 days, one week
log.retention.minutes=10
   mins based config
log.rentiontion.ms=100
    milli secs based configuration

Size based configuraton
log.retention.bytes=1073741824
  To delete logs based on the total number of bytes it retained 
 by default 1 gb.

Topic level configuration:

When we create topic or when alter topic 

--config <String: name=value>            A topic configuration override for the
                                           topic being created or altered. The
                                           following is a list of valid
                                           configurations:
                                                cleanup.policy
                                                compression.type
                                                delete.retention.ms
                                                file.delete.delay.ms
                                                flush.messages
                                                flush.ms
                                                follower.replication.throttled.
.....................................................................................

Lab:
Note : if any server is running, we need to stop broker using

./bin/kafka-server-stop.sh

or
Press ctrl +c

server.properties

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168
#log.retention.minutes=10
#log.retention.ms=1000

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
#log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

After Changing ,restart kafka server:

Start Kafka Server:
 Test after 1 min and check along with interval property, you can see log files gets deleted
Note: only old log files get deleted , kafka starts create new log files automatically.

.................................................................................

Lab :
Create topic with Retention policy:


Lab :
Create topic with rentension policy

$./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic hello-topic --config retention.ms=20000

Produce some events
 ./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic hello-topic

consume events
 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic hello-topic --from-beginning --property print.timestamp=true

Wait for 2 mins and check the messages again. you can notice , messages have been log files been deleted

....................................................................................
			      Dynamic Configuration
....................................................................................

Broker is running in production, broker has many topics already created , having some logs also.

By default Brokers and topics configurations are dervied from global "server.properties" file and default configurations supplied by kafka

What if i want to override like broker configuration or topic configuration during runtime : dynamic configurations

Overriding Topic Configuration Defaults

Dynamic Kafka Broker configuration change using the kafka-configs CLI
....................................................................................
			kafka-configs.sh -To manage runtime Configurations
....................................................................................
./bin/kafka-configs.sh --help
This tool helps to manipulate and describe entity config for a topic, client, user, broker or ip
Option                                 Description
------                                 -----------
--add-config <String>                  Key Value pairs of configs to add.
                                         Square brackets can be used to group
                                         values which contain commas: 'k1=v1,
                                         k2=[v1,v2,v2],k3=v3'. The following
                                         is a list of valid configurations:
                                         For entity-type 'topics':
                                        cleanup.policy
                                        compression.type
                                        delete.retention.ms
                                        file.delete.delay.ms
                                        flush.messages
                                        flush.ms
                                        follower.replication.throttled.
                                         replicas
                                        index.interval.bytes
                                        leader.replication.throttled.replicas
                                        local.retention.bytes
                                        local.retention.ms
                                        max.compaction.lag.ms
                                        max.message.bytes
                                        message.downconversion.enable
                                        message.format.version
                                        message.timestamp.difference.max.ms
                                        message.timestamp.type
                                        min.cleanable.dirty.ratio
                                        min.compaction.lag.ms
                                        min.insync.replicas
                                        preallocate
                                        remote.storage.enable
                                        retention.bytes
                                        retention.ms
                                        segment.bytes
                                        segment.index.bytes
                                        segment.jitter.ms
                                        segment.ms
                                        unclean.leader.election.enable
                                       For entity-type 'brokers':
                                        advertised.listeners
                                        background.threads
                                        compression.type
                                        follower.replication.throttled.rate
                                        leader.replication.throttled.rate
                                        listener.security.protocol.map
                                        listeners
                                        log.cleaner.backoff.ms
                                        log.cleaner.dedupe.buffer.size
                                        log.cleaner.delete.retention.ms
                                        log.cleaner.io.buffer.load.factor
                                        log.cleaner.io.buffer.size
                                        log.cleaner.io.max.bytes.per.second
                                        log.cleaner.max.compaction.lag.ms
                                        log.cleaner.min.cleanable.ratio
                                        log.cleaner.min.compaction.lag.ms
                                        log.cleaner.threads
                                        log.cleanup.policy
                                        log.flush.interval.messages
                                        log.flush.interval.ms
                                        log.index.interval.bytes
                                        log.index.size.max.bytes
                                        log.message.downconversion.enable
                                        log.message.timestamp.difference.max.
                                         ms
                                        log.message.timestamp.type
                                        log.preallocate
                                        log.retention.bytes
                                        log.retention.ms
                                        log.roll.jitter.ms
                                        log.roll.ms
                                        log.segment.bytes
                                        log.segment.delete.delay.ms
                                        max.connection.creation.rate
                                        max.connections
                                        max.connections.per.ip
                                        max.connections.per.ip.overrides
                                        message.max.bytes
                                        metric.reporters
                                        min.insync.replicas
                                        num.io.threads
                                        num.network.threads
                                        num.recovery.threads.per.data.dir
                                        num.replica.fetchers
                                        principal.builder.class
                                        producer.id.expiration.ms
                                        replica.alter.log.dirs.io.max.bytes.
                                         per.second
                                        sasl.enabled.mechanisms
                                        sasl.jaas.config
                                        sasl.kerberos.kinit.cmd
                                        sasl.kerberos.min.time.before.relogin
                                        sasl.kerberos.principal.to.local.rules
                                        sasl.kerberos.service.name
                                        sasl.kerberos.ticket.renew.jitter
                                        sasl.kerberos.ticket.renew.window.
                                         factor
                                        sasl.login.refresh.buffer.seconds
                                        sasl.login.refresh.min.period.seconds
                                        sasl.login.refresh.window.factor
                                        sasl.login.refresh.window.jitter
                                        sasl.mechanism.inter.broker.protocol
                                        ssl.cipher.suites
                                        ssl.client.auth
                                        ssl.enabled.protocols
                                        ssl.endpoint.identification.algorithm
                                        ssl.engine.factory.class
                                        ssl.key.password
                                        ssl.keymanager.algorithm
                                        ssl.keystore.certificate.chain
                                        ssl.keystore.key
                                        ssl.keystore.location
                                        ssl.keystore.password
                                        ssl.keystore.type
                                        ssl.protocol
                                        ssl.provider
                                        ssl.secure.random.implementation
                                        ssl.trustmanager.algorithm
                                        ssl.truststore.certificates
                                        ssl.truststore.location
                                        ssl.truststore.password
                                        ssl.truststore.type
                                        unclean.leader.election.enable
                                       For entity-type 'users':
                                        SCRAM-SHA-256
                                        SCRAM-SHA-512
                                        consumer_byte_rate
                                        controller_mutation_rate
                                        producer_byte_rate
                                        request_percentage
                                       For entity-type 'clients':
                                        consumer_byte_rate
                                        controller_mutation_rate
                                        producer_byte_rate
                                        request_percentage
                                       For entity-type 'ips':
                                        connection_creation_rate
                                       Entity types 'users' and 'clients' may
                                         be specified together to update
                                         config for clients of a specific
                                         user.
--add-config-file <String>             Path to a properties file with configs
                                         to add. See add-config for a list of
                                         valid configurations.
--all                                  List all configs for the given topic,
                                         broker, or broker-logger entity
                                         (includes static configuration when
                                         the entity type is brokers)
--alter                                Alter the configuration for the entity.
--bootstrap-server <String: server to  The Kafka server to connect to. This
  connect to>                            is required for describing and
                                         altering broker configs.
--broker <String>                      The broker's ID.
--broker-defaults                      The config defaults for all brokers.
--broker-logger <String>               The broker's ID for its logger config.
--client <String>                      The client's ID.
--client-defaults                      The config defaults for all clients.
--command-config <String: command      Property file containing configs to be
  config property file>                  passed to Admin Client. This is used
                                         only with --bootstrap-server option
                                         for describing and altering broker
                                         configs.
--delete-config <String>               config keys to remove 'k1,k2'
--describe                             List configs for the given entity.
--entity-default                       Default entity name for
                                         clients/users/brokers/ips (applies
                                         to corresponding entity type in
                                         command line)
--entity-name <String>                 Name of entity (topic name/client
                                         id/user principal name/broker id/ip)
--entity-type <String>                 Type of entity
                                         (topics/clients/users/brokers/broker-
                                         loggers/ips)
--force                                Suppress console prompts
--help                                 Print usage information.
--ip <String>                          The IP address.
--ip-defaults                          The config defaults for all IPs.
--topic <String>                       The topic's name.
--user <String>                        The user's principal name.
--user-defaults                        The config defaults for all users.
--version                              Display Kafka version.
--zk-tls-config-file <String:          Identifies the file where ZooKeeper
  ZooKeeper TLS configuration>           client TLS connectivity properties
                                         are defined.  Any properties other
                                         than zookeeper.clientCnxnSocket,
                                         zookeeper.ssl.cipher.suites,
                                         zookeeper.ssl.client.enable,
                                         zookeeper.ssl.crl.enable, zookeeper.
                                         ssl.enabled.protocols, zookeeper.ssl.
                                         endpoint.identification.algorithm,
                                         zookeeper.ssl.keystore.location,
                                         zookeeper.ssl.keystore.password,
                                         zookeeper.ssl.keystore.type,
                                         zookeeper.ssl.ocsp.enable, zookeeper.
                                         ssl.protocol, zookeeper.ssl.
                                         truststore.location, zookeeper.ssl.
                                         truststore.password, zookeeper.ssl.
                                         truststore.type are ignored.
--zookeeper <String: urls>             DEPRECATED. The connection string for
                                         the zookeeper connection in the form
                                         host:port. Multiple URLS can be
                                         given to allow fail-over. Required
                                         when configuring SCRAM credentials
                                         for users or dynamic broker configs
                                         when the relevant broker(s) are
                                         down. Not allowed otherwise.


Broker level configurations:
.............................
//Adding or editing existing broker level settings

$ ./bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type brokers --entity-default --add-config min.insync.replicas=2 

KafkaConfig myconfig=new KafkaConfig()
myconfig.setProperty('min.insync.replicas',2)


//We can delete the dynamic configuration as well:

./bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type brokers --entity-default  --delete-config min.insync.replicas


Topics:
egs:
./bin/kafka-configs.sh --bootstrap-server localhost:9092 \
                --alter --entity-type topics \
                --entity-name configured-topic \
                --add-config max.message.bytes=10485880


Alter topic with rention policy:

Lab:
Steps:
1.create a new topic with default settings
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic payment-topic
2.Alter topic configuration like log retention policy
 ./bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type topics --entity-name payment-topic --add-config retention.ms=20000

After alertering , check the same process like above

3.produce message 
./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic payment-topic
4.consume message
./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic payment-topic --from-beginning
.....................................................................................
		How to see the configurations applied?

 ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic payment-topic

Topic: payment-topic    TopicId: krK_YW-aQiOm0tG2DEOxQg PartitionCount: 1       ReplicationFactor: 1    Configs: retention.ms=20000
Topic: payment-topic    Partition: 0    Leader: 0       Replicas: 0     Isr: 0
.....................................................................................
				.....................................................................................
				Partition
.....................................................................................

What is partition?
    In order to distribute the "Storage and Processing of Events" in a topic, Kafka uses the concept called "Partition"
	
    The topic is made of  one or More partitions.

The topic is broken into multiple partitions
  
  Every partion is is just folder only.

  Each partition will have its own log files

			   payment-topic
				|
		-------------------------------------------------
		|               |              |
	   payment-topic-0  payment-topic-1  payment-topic-2
                |                |               |
            log files       log files         log files


By default every topic has only one partition.

Lab:
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic sales-topic --paritions 2

This command will create two partitions
 
After supplying partition option you can see inside kafka-logs folder

/tmp/kafka-logs
       |
       sales-topic-0
       sales-topic-1

How to know many partitions are there in the topic

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic sales-topic

Topic: sales-topic   TopicId: Qld8IMqPSDqV7YMHB-dT4Q PartitionCount: 2       ReplicationFactor: 1   Configs:
      Topic: sales-topic      Partition: 0    Leader: 0       Replicas: 0     Isr: 0
      Topic: sales-topic      Partition: 1    Leader: 0       Replicas: 0     Isr: 0


Why Partitions?

=>Partitions helps to distribute messages into multiple log files so that we dont need to dump into one single file, we scale the message across multiple files
=>This partition is also unit of parallelism.

....................................................................................
				Segements
....................................................................................
What is segment?
  Segement is just actual log files contains "Records"

Topics are broken into partions , and Partitions are broken into segements

How to list segements(Log file)
/tmp/kafka-logs/sales-topic-0$ ls -l
total 8
-rw-r--r-- 1 subugee subugee 10485760 Jun 15 11:34 00000000000000000000.index
-rw-r--r-- 1 subugee subugee        0 Jun 15 11:34 00000000000000000000.log
-rw-r--r-- 1 subugee subugee 10485756 Jun 15 11:34 00000000000000000000.timeindex
-rw-r--r-- 1 subugee subugee        8 Jun 15 11:34 leader-epoch-checkpoint
-rw-r--r-- 1 subugee subugee       43 Jun 15 11:34 partition.metadata

Here segement is group of files
.log
.index
.timeindex

Segement is just log file where actual records are stored.

Records are stored as "Byte Array"

.log file stores actaual Records.

.....................................................................................
			 Segment File or Log File Architecture
.....................................................................................

How events or data or message is stored into segement?

 The log file is structured with two parts

 1.Actual data- event
 2.Offset

Actual data is  published into segement as "record" which is simple byte array.

Offset:
  An Offset into a file is simply the charactor location within that file,usually starting with 0; thus offset 240" is actually the 241 st byte in the file.


 a   b  c   d  e  f  g                   =>actual record
-------------------------------------------------------
 0   1  2   3  4  5  6                    =>Offset 
--------------------------------------------------

A Partition can have multiple segement meaning that i can have multile log files

Multiple log files inside single folder(partition)?
FileNames
  000000000000000.log - segement-0
  000000000000001.log - segement-1
  000000000000002.log - segement-3

How to represent multiple segements?

Segement-0        Segment-1                Segement-2 
Offset 0-957 =>   Offset 958 to 1675  ==>  offset 1676 --?   <==Writes

Only one Segement can be active at any point in time

The segement size(file size) is determined by the property

log.segment.bytes
  The maximum size of a single log file.
  When it reaches , kafka will create new one.

log.segement.ms
  The kafka will wait before commiting(Writing data) the segement
 default 1 week.

Note:
   A kafka broker keeps an open file handler to every active segement in every partition, even for inactive segements. This leads to a usually high number of open file handles, and the OS must be tuned accordingly.
.....................................................................................
Lab:
 in order to create new log files

config/server.properties

log.segment.bytes=1000

1.start zookeeper and kafka broker
2.create topic with single partition
3.Keep on publishing  messages  until it reaches 1000 bytes
4.see the log locations /tmp/kafka-logs

/tmp/kafka-logs/product-topic-0$ ls -l
total 24
-rw-r--r-- 1 subugee subugee        0 Jun 15 12:29 00000000000000000000.index
-rw-r--r-- 1 subugee subugee      988 Jun 15 12:29 00000000000000000000.log
-rw-r--r-- 1 subugee subugee       12 Jun 15 12:29 00000000000000000000.timeindex
-rw-r--r-- 1 subugee subugee 10485760 Jun 15 12:29 00000000000000000012.index
-rw-r--r-- 1 subugee subugee      580 Jun 15 12:29 00000000000000000012.log
-rw-r--r-- 1 subugee subugee       56 Jun 15 12:29 00000000000000000012.snapshot
-rw-r--r-- 1 subugee subugee 10485756 Jun 15 12:29 00000000000000000012.timeindex
-rw-r--r-- 1 subugee subugee        8 Jun 15 12:28 leader-epoch-checkpoint
-rw-r--r-- 1 subugee subugee       43 Jun 15 12:28 partition.metadata
.....................................................................................
		How to read Record based on offset

Note:
 if you read event based on offset , you must supply partition

./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic demo-topic

./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic demo-topic  --offset 0  --partition 0
Hello
Hai
How are you
^CProcessed a total of 3 messages

$ ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic demo-topic  --offset 1  --partition 0
tition 0
Hai
How are you
.....................................................................................
			 How to inspect the internals of log file
				  (Dump log)
.....................................................................................

Sometimes when you’re working with Kafka, you may find yourself needing to manually inspect the underlying logs of a topic.

Whether you’re just curious about Kafka internals or you need to debug an issue and verify the content, the kafka-dump-log command is your friend


Lab:

 ./bin/kafka-dump-log.sh --print-data-log --files /../tmp/kafka-logs/todos-topic-0/00000000000000000000.log


Dumping /../tmp/kafka-logs/todos-topic-0/00000000000000000000.log
Log starting offset: 0
baseOffset: 0 lastOffset: 0 count: 1 baseSequence: 0 lastSequence: 0 producerId: 0 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 0 CreateTime: 1689843189475 size: 73 magic: 2 compresscodec: none crc: 2361695731 isvalid: true
| offset: 0 CreateTime: 1689843189475 keySize: -1 valueSize: 5 sequence: 0 headerKeys: [] payload: Hello
baseOffset: 1 lastOffset: 1 count: 1 baseSequence: 1 lastSequence: 1 producerId: 0 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 73 CreateTime: 1689843191996 size: 79 magic: 2 compresscodec: none crc: 1642987840 isvalid: true
| offset: 1 CreateTime: 1689843191996 keySize: -1 valueSize: 11 sequence: 1 headerKeys: [] payload: How are you
baseOffset: 2 lastOffset: 2 count: 1 baseSequence: 2 lastSequence: 2 producerId: 0 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 152 CreateTime: 1689843196304 size: 79 magic: 2 compresscodec: none crc: 1586663559 isvalid: true
| offset: 2 CreateTime: 1689843196304 keySize: -1 valueSize: 11 sequence: 2 headerKeys: [] payload: Learn kafka
baseOffset: 3 lastOffset: 3 count: 1 baseSequence: 3 lastSequence: 3 producerId: 0 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 231 CreateTime: 1689843321658 size: 78 magic: 2 compresscodec: none crc: 3678397341 isvalid: true
| offset: 3 CreateTime: 1689843321658 keySize: -1 valueSize: 10 sequence: 3 headerKeys: [] payload: Learn java
baseOffset: 4 lastOffset: 4 count: 1 baseSequence: 4 lastSequence: 4 producerId: 0 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 309 CreateTime: 1689843325466 size: 76 magic: 2 compresscodec: none crc: 1243828304 isvalid: true
| offset: 4 CreateTime: 1689843325466 keySize: -1 valueSize: 8 sequence: 4 headerKeys: [] payload: Learn AI
baseOffset: 5 lastOffset: 5 count: 1 baseSequence: 5 lastSequence: 5 producerId: 0 producerEpoch: 0 partitionLeaderEpoch: 0 isTransactional: false isControl: false deleteHorizonMs: OptionalLong.empty position: 385 CreateTime: 1689843332832 size: 87 magic: 2 compresscodec: none crc: 1383553335 isvalid: true
| offset: 5 CreateTime: 1689843332832 keySize: -1 valueSize: 19 sequence: 5 headerKeys: [] payload: Learn Data Scicence

.....................................................................................
				Index Files
.....................................................................................
.index
 contains the mappings of "offset" to its position in ".log" file
.timeIndex
  file contains the mappings of "Timestamp" to message offset

if you search message based on offset, it uses index files
if you search message based on timestamp, it uses timeindex files
			
			 Topic
			   |
		--------------------------------------
		|              |                  |
	 partition-0        partition-1       partition-2
	     |
	 00000000.log
	    |
	offset 0 1 2 3 ...
	byte   x a y z ....
 	    |
	 000000.index
        offset 0  1    2   3 
	byte   23 232 23  323
          |
        00000.timeindex
       timestam 23232323   343434 34343434 
       offset     0         1        2 


...................................................................................
			 Events/Message Distributions and Partitions
.....................................................................................

Topics are broken into partions, partions are broken into segements

As aProducer we send data to the Topic only, Topic distributes message among partitions

Partitioner:
   Partitioner is  a process that will determine to which partition a specific message/event will be assigned.


 In Nutshell Partitioner is simple "Java Class/Program" having routing algorithim.
 This algorthim decides where to go.


For eg i have topic with 3 partition

 Record===>Publish==>Partitioner===>where to to =>P1 Or P2 Or P3

How  partitions are selected by Partitioner?
 =>Based on Record only.

Record contains information for how to select Partition

Partitioner Algorthims:
.......................
1.Round Robin Alogorthim
2.Sticky Partitioner Alogorthim
3.Key Based Partitioner Alogorthim


Round Robin Algorthim:
  It is default algorthim used in kafka old versions less than 2.3
Lets i assume i have two partitions

 M1 ------->P1
 M2 ------->P2
 M3-------->P1
 M4-------->P2
In round robin messages are distributed equally to all paritions

Drawback of Round Robin Algorthim:
...................................
 if more messages and more partitions, there is possiblity of higher latency and low performance...

Sticky Partitioner:
...................
  It is built on the top of Round robin only.
  Stick Partitioner wont send indidual message/record rather it sends as batch.
  It improves the peformance, reduces network latency.
  This is default Partitioner in the lastest kafka 

Stick Partitioner = {Round Robin + Batching}

Basic Record(Event/Message) Structure:
.....................................

In kafka messages(Records/Events) are organized based on "Key-value" Pair

Can we know that Record has key?
Yes

Lab:
 How to print key of Record?

./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todos-topic --from-beginning --property print.key=true
null    Hello
null    How are you
null    Learn kafka
null    Learn java
null    Learn AI
null    Learn Data Scicence

Here "null" key "Hello" is value

By default every message has key "null" key

 	"If you produce message/record/event without key means with null key"
	
Partitioner selection is based on "Key" Only

               "By default Sticky Partitioner is selected if key is null"


Lab:
  Create topic with 2 partitions
  Distribute message with 'null' key ,without key
  Watch In consumerside keys and partitions

create topic 
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic order-topic --partitions 2

publish message without key, with null key

open two cmd prompt and try to publish message see in the consumer side

./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic order-topic

./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic order-topic



Consume Message:

./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic order-topic --from-beginning --property print.key=true --property print.partition=true

Partition:1     null    Hello
Partition:1     null    Hai
Partition:1     null    How are you
Partition:1     null    kjdaf;lkadsf
Partition:1     null    asdfadf
Partition:1     null    adf
Partition:1     null    adfadfa
Partition:1     null    adfadfa
Partition:1     null    adfasfdasf
Partition:1     null    adfsafd
Partition:1     null    adfasfsadf
Partition:1     null    adfasdfas
Partition:1     null    adfafadf
Partition:1     null    asfdafasf
Partition:1     null    adfafdsaf
Partition:1     null    adfsadfasdf
Partition:1     null    adfsadfdsaf
Partition:1     null    adfadsfdsaf
Partition:1     null    adfdsafadsf
Partition:1     null    adfsafadf
Partition:1     null    adfasfd
Partition:1     null    adfasfsadf
Partition:1     null    adfdsafa
Partition:1     null    adfadf
Partition:1     null    asdfadsfsadf
Partition:1     null    asdfasdf
Partition:1     null    adfasdfadsf
Partition:1     null    adfsadfadsf
Partition:1     null    adsfsadfsadf
Partition:1     null    adfasdfadsfasf
Partition:1     null    adfasfddsafkasdfnalkjsfas
Partition:1     null    asdfjdsalkfjhalkjdsfhlkjdsafhdsalkjhfalksjfhalkdsjfhsadf
Partition:1     null    lakdsjflksafjhdsalkfhdsalkjfhdslkjfhdsalkjfhdsalf
Partition:1     null    adslkfsajdhflkjsadhflkjdsfhldsakjfhdsaf
Partition:1     null    lakdjfhlkjdsahflkdajfhldjfhadsf
Partition:1     null    alkdsjfhlkdsahfdsakjfhdalkjfhasrewr32432432\\
Partition:1     null    32432432
Partition:1     null    234234
Partition:1     null    23423123
Partition:1     null    123213
Partition:1     null    4324324
Partition:1     null    234324324232355355232
Partition:1     null    24324324
Partition:1     null    34324324
Partition:1     null    234324324
Partition:1     null    234324234324324
Partition:1     null    23423423
Partition:1     null    24324
Partition:1     null    24324
Partition:1     null    243324324
Partition:1     null    234324324
Partition:1     null    234324324
Partition:1     null    2343242234324324
Partition:1     null    234324324324
Partition:1     null    234324324324324
Partition:1     null    41242143214
Partition:1     null    13242142134
Partition:1     null    242423432
Partition:1     null    243242
Partition:1     null    2343242
Partition:1     null    234234
Partition:0     null    234324
Partition:0     null    24324324
Partition:0     null    2234324
Partition:0     null    234324
Partition:0     null    234324324
Partition:0     null    fsdf
Partition:0     null    sdf
Partition:1     null    Subramanian
Partition:1     null    Karthik

.....................................................................................
			 Key based Distribution
....................................................................................

Lab:
 create topic with 2 partitions
 publish message with key
 consume message

create topic
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic user-topic --partitions 2

publish message with key

 --property "parse.key=true"  --property "key.separator=:"

./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic user-topic
   --property "parse.key=true"  --property "key.separator=:"

Consumer
./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic user-topic --from-beginning --property print.key=true  --property print.value=true  --property print.partition=true

artition:1     id      1
Partition:1     project IBM
Partition:1     project java
Partition:1     project microservices
Partition:1     client  google
Partition:1     null       --property "parse.key=true"  --property "key.sepapayment:cash
Partition:1     Client  yahoo
Partition:1     client  microsoft
Partition:1     client  yahoo
Partition:1     id      1
Partition:0     2       33434
Partition:0     2       88888
Partition:1     3       8833434
Partition:1     3       34343434
Partition:1     4       8833434
Partition:0     2       343434
Partition:1     3       33434
Partition:0     56      88343434
Partition:0     58      343434
Partition:0     23      42323
Partition:1     id      2232323
.....................................................................................
.....................................................................................
  	How key-value pair messages are distributed to partitions
...................................................................................
In the old, kafka they used "round robind".
There is problem when i send the event with same, it is distributed in different partitions which is not that much efficient.

Kafka introduced an alorithim called "Key Hashing Algorithm"

Key hashing is the process of determining the mapping of a key to a partition in the default partitioner.
The keys are hashed based on an algorthim called "murmur2 "

  Targetpartition = Math.abs(Util.murmur2(KeyInBytes) % (numPartiontions-1) 
   
Note;
  if you have same key ,but different values, the same partition will be used
..................................................................................

Can you send events to Partitions directly?

	"You can specify partition number directly in the ProducerRecord, but not with kafka-console-producer"
..................................................................................
				Replication



We enable replication at the topic level. When a new topic is created we can specify, explicitly or through defaults, how many replicas we want.

Lab:

Start servers
./bin/zookeeper-server-start.sh  config/zookeeper.properties
./bin/kafka-server-start.sh config/server.properties

create topic with replication 
 --replication-factor Number

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --topic product-topic --create --partitions 2 --replication-factor 3
Error while executing topic command : Replication factor: 3 larger than available brokers: 1.
[2023-07-21 16:16:42,735] ERROR org.apache.kafka.common.errors.InvalidReplicationFactorException: Replication factor: 3 larger than available brokers: 1.
 (kafka.admin.TopicCommand$)

why we are getting this error?
  Because we are running only one broker, it requires three brokers
....................................................................................

Lab: 
 How to start kafka with KRaft Mode?
 
type of broker
1.controller - Meta data management , leader election,notification to brokers
2.broker - Data plane - get produce req,get consumer req,replication.....


Node -  can act as either broker or controller

Node - can as as both broker and controller

 node-102 - Data plane + control plan 


1 zookeeper ---- broker  1 broker 2 broker 3
 
zookeeper 1 , zookeeper 2 --- broker  1 broker 2 broker 3

broker 1 broker 2 broker 3, broker 4
  |
controller


broker 1 broker 2 broker 3, broker 4
  |                  |
controller        controller
  |                 |
meta data         meta data

Lab: Single Kafka broker with Single Controller: Same server is going to act as broker and controller.

Step:

1.Generate a Cluster ID 
 
Before generating cluster id, we need to know, how to use kafka-storage.sh utility.

 ./bin/kafka-storage.sh --help
usage: kafka-storage [-h] {info,format,random-uuid} ...

The Kafka storage tool.

positional arguments:
  {info,format,random-uuid}
    info                 Get information about the Kafka log directories on this node.
    format               Format the Kafka log directories on this node.
    random-uuid          Print a random UUID.

KAFKA_CLUSTER_ID="$(bin/kafka-storage.sh random-uuid)"
subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0$ echo $KAFKA_CLUSTER_ID
gwOzNBjXS7GAv_6qViV7QQ

2.Format log directories using cluster id

./bin/kafka-storage.sh format -t  $KAFKA_CLUSTER_ID -c config/kraft/server.properties
Formatting /tmp/kraft-combined-logs with metadata.version 3.5-IV2.

3.Start kafka server in Kraft mode
./bin/kafka-server-start.sh config/kraft/server.properties

4.Create simple topic and test.

./bin/kafka-topics.sh --create --topic customer-topic --bootstrap-server localhost:9092
Created topic customer-topic.

./bin/kafka-topics.sh --describe --topic customer-topic --bootstrap-server localhost:9092
Topic: customer-topic   TopicId: HfHY97dTTLi-S34JowWmHg PartitionCount: 1       ReplicationFactor: 1    Configs: segment.bytes=1073741824
        Topic: customer-topic   Partition: 0    Leader: 1       Replicas: 1     Isr: 1
....................................................................................
Multi node setup with replication
confluent platform
 local
 cloud
kafka schema registry
Kafka connect-cdc - saga 
kafka streams-java implementation,kqldb
.....................................................................................
			Multi node setup with KRaft
....................................................................................pPre requiests:
1.You need lastest kafka distribution which supports kRaft configuration.
		

Steps:
.......
1.Just explore config files

 kafka/config/kraft
   server.properties
   broker.properties
   controller.properties

In KRaft mode, each kafka server can be configured as "controller, a broker , or both"
Here all the properties files are same only. 


We have discussed already that KRaft can be configureed using existing brokers.

You can configure any broker as "Only Controller" - We cant store topics data..
You can configure any broker as "Only Broker" - we store regular topics data..
YOu can configure any broker as "broker and controller" - we can store cluster meta data and also user's topics data

server.properties = Broker + controller
broker.properties = Broker
controller.properties = controller

There is core configuration.

process.roles property

process.roles=broker
process.roles=controller
process.roles=broker,controller

KRaft Mode
for eg:
 ./bin/kafka-server.sh  config/kraft/server.properties
 ./bin/kafka-server.sh  config/kraft/broker.properties
 ./bin/kafka-server.sh  config/kraft/controller.properties

Zookeeper Mode
 ./bin/kafka-server.sh  config/server.properties
.....................................................................................
			Multi Node Arch
.....................................................................................

We need to start kafka brokers.
How each brokers are identified?
Using broker id /node id

node.id=1

node.id = 1 | node.id=2 | node.id=3
.....................................................................................
			.....................................................................................
			  Controller configuration
.....................................................................................
You can configure the list of "controllers" in the cluster.


# The connect string for the controller quorum
controller.quorum.voters=1@localhost:9093

Here
  "1" is node id => The node one is controller
  "localhost" is host name of the controller
  "9093" is port of the controller

controller.quorum.voters says list of controllers

lets say i have two node

1.node-1 and node-2

node-1 is designated as broker
node-2 is designated as controller

node-1
  process.roles=broker
  node.id=1
  controller.quorum.voters=2@localhost:9092

node-2
  process.roles=controller
  node.id=2
  controller.quorum.voters=3@localhost:9094
...................................................................................

1.node-1 and node-2

node-1 is designated as broker and controller
node-2 is designated as controller and broker

node-1
  process.roles=controller,broker
  node.id=1
  controller.quorum.voters=1@localhost:9092, 2@localhost:9093


node-2
  process.roles=controller,broker
  node.id=2
  controller.quorum.voters=1@localhost:9092,2@localhost:9093

.....................................................................................
			Socket server settings
....................................................................................

if broker: broker.properties
................................		

Syntax:
listeners = listener_name://host_name:port
	
 This syntax is specific uri scheme(rule) syntax

	listener_name://host_name:port
	    |
          Protocal://hostName:port

eg:
   http://localhost:8080
   ws://localhost:9090
   jdbc:mysql://localhost:3306

PLAINTEXT://localhost:9092

Kafka has two protocals(Listeners)

1.PLAINTEXT
  This is protocal used for brokers communication
2.CONTROLLER
  This is protocal used for controller communication.

eg:
controller.properties
 listeners=CONTROLLER://:9093

broker.properties
listeners=PLAINTEXT://localhost:9092

broker and controller
listeners=PLAINTEXT://:9092,CONTROLLER://:9093

 Here one single node supports both broker and controller
 
  broker is running in 9092 port
  controller is running in 9093 port
....................................................................................
		  advertised.listeners
....................................................................................
advertised.listeners=PLAINTEXT://localhost:9092
 
 This is configuration is necessary for the brokers who wants to be commnincated by clients like Producer and Consumer.

.....................................................................................
			Log dir
....................................................................................

if you start multi node arch.. each node must have its own log files

if you run multiple brokers and controllers in the single host(machine), you need to specifiy the separate location.

log.dirs=/tmp/server-1/kraft-combined-logs

log.dirs=/tmp/server-2/kraft-combined-logs

log.dirs=/tmp/server-3/kraft-combined-logs
....................................................................................

Demo steps:
I am going to create many config files
server1.properites
server2.properties
server3.properties

subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0/config/kraft$ cp server.properties server1.properties
subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0/config/kraft$ cp server.properties server2.properties
subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0/config/kraft$ cp server.properties server3.properties
subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0/config/kraft$ ls -l
total 48
-rw-r--r-- 1 subu subu 6136 Jun  5 14:33 broker.properties
-rw-r--r-- 1 subu subu 5765 Jun  5 14:33 controller.properties
-rw-r--r-- 1 subu subu 6340 Jun  5 14:33 server.properties
-rw-r--r-- 1 subu subu 6340 Jul 24 15:11 server1.properties
-rw-r--r-- 1 subu subu 6340 Jul 24 15:12 server2.properties
-rw-r--r-- 1 subu subu 6340 Jul 24 15:12 server3.properties

Port:
 9092 - broker1 ,
 19092 - controller 1

Server -1 Setup:Node-1 Setup:
...............................
Server -1 Setup:Node-1 Setup:
...............................
server1.properties
Note: here we need to define controller port and broker port should be different
controller port is used for controller communication
broker port is used for external communication like producers and consumers



# The role of this server. Setting this puts us in KRaft mode
process.roles=broker,controller

# The node id associated with this instance's roles
node.id=1

# The connect string for the controller quorum
controller.quorum.voters=1@localhost:19092,2@localhost:19093,3@localhost:19094

listeners=PLAINTEXT://:9092,CONTROLLER://:19092
inter.broker.listener.name=PLAINTEXT
advertised.listeners=PLAINTEXT://localhost:9092
controller.listener.names=CONTROLLER
log.dirs=/tmp/server1/kraft-combined-logs

server2.properties

# The role of this server. Setting this puts us in KRaft mode
process.roles=broker,controller

# The node id associated with this instance's roles
node.id=2

# The connect string for the controller quorum
controller.quorum.voters=1@localhost:19092,2@localhost:19093,3@localhost:19094
listeners=PLAINTEXT://:9093,CONTROLLER://:19093
inter.broker.listener.name=PLAINTEXT
advertised.listeners=PLAINTEXT://localhost:9093
controller.listener.names=CONTROLLER
log.dirs=/tmp/server2/kraft-combined-logs


server3.properties

# The role of this server. Setting this puts us in KRaft mode
process.roles=broker,controller

# The node id associated with this instance's roles
node.id=3

# The connect string for the controller quorum
controller.quorum.voters=1@localhost:19092,2@localhost:19093,3@localhost:19094

listeners=PLAINTEXT://:9094,CONTROLLER://:19094
inter.broker.listener.name=PLAINTEXT
advertised.listeners=PLAINTEXT://localhost:9094
controller.listener.names=CONTROLLER
log.dirs=/tmp/server3/kraft-combined-logs
.....................................................................................


Step 4: Generate clusterid
 in order to establish cluster, we need cluster unique id, through which we establish cluster.

./bin/kafka-storage.sh random-uuid
bvIghndQQfiTb2IdisFI1Q
We have generated unique cluster id

Step 5: We have to format all the storage directories, this is basically where put in log.dirs properties

subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0$ ./bin/kafka-storage.sh format -t bvIghndQQfiTb2IdisFI1Q -c ./config/kraft/server1.properties
Formatting /tmp/server1/kraft-combined-logs with metadata.version 3.5-IV2.
subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0$ ./bin/kafka-storage.sh format -t bvIghndQQfiTb2IdisFI1Q -c ./config/kraft/server2.properties
Formatting /tmp/server2/kraft-combined-logs with metadata.version 3.5-IV2.
subu@LAPTOP-R2TGGFDL:~/kafka_2.13-3.5.0$ ./bin/kafka-storage.sh format -t bvIghndQQfiTb2IdisFI1Q -c ./config/kraft/server3.properties
Formatting /tmp/server3/kraft-combined-logs with metadata.version 3.5-IV2.
s


Step 6: we need allocate max memory, in order to work cluster properly

export KAFKA_HEAP_OPTS="-Xmx200M -Xms100M"

Step 7: We need to start all kafka servers in daemon mode

./bin/kafka-server-start.sh -daemon ./config/kraft/server1.properties
./bin/kafka-server-start.sh -daemon ./config/kraft/server2.properties
./bin/kafka-server-start.sh -daemon ./config/kraft/server3.properties

Step 8:Test all servers are running
 jcmd | grep kafka
7272 kafka.Kafka ./config/kraft/server2.properties
7113 kafka.Kafka ./config/kraft/server1.properties
7470 kafka.Kafka ./config/kraft/server3.properties

Step 9: create topic 
./bin/kafka-topics.sh --create --topic kraft-test --partitions 3 --replication-factor 3 --bootstrap-server localhost:9092

Created topic kraft-test.

Step 10:
./bin/kafka-topics.sh  --bootstrap-server localhost:9092 --list

Step 11:
./bin/kafka-topics.sh  --bootstrap-server localhost:9092 --l describe kraft-test

opic: kraft-test       TopicId: YRSN_8SSRzm4GEf2DdvqnQ PartitionCount: 3       ReplicationFactor: 3    Configs: segment.bytes=1073741824
        Topic: kraft-test       Partition: 0    Leader: 1       Replicas: 1,2,3 Isr: 1,2,3
        Topic: kraft-test       Partition: 1    Leader: 2       Replicas: 2,3,1 Isr: 2,3,1
        Topic: kraft-test       Partition: 2    Leader: 3       Replicas: 3,1,2 Isr: 3,1,2

Step 12: produce and consume

./bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic kraft-test

 ./bin/kafka-console-producer.sh --bootstrap-server localhost:9093 --topic kraft-test


Now you are entering message in 9093 node, but messages are delivered via 9093 which means the data is distributed across the cluster.
.....................................................................................
			  Kafka Connect
.....................................................................................

Kafka Provides:

1.storage layer
  How to store events
  Topic-partition-segmation 
  Replication  
2.compute layer
  How to communicate Kafka Storage layer

1.Producers
2.Consumers

Producers sent events to Kafka Storage
  Can be apps,clis,devices with apps which produces and send events

Consumers read events from the Kakfa Storage.
  Can be apps,clis,devices with apps which consume events
.....................................................................................

Connect core concepts:

1.Connect:
  It is server , which performs read and write data from the data stores into kafka storage layer called broker

2.Connector:
   It is java lib /jar file which provides high level abstraction that takes care of data transfers

3.Task:
   The implementation of how data is copied to or from kafka

4.Workers
    The workers or connect are running process that execute connectors and tasks

5.Converters 
     Data Serialization and Deserialization

Connectors:
 There are two types connectors

1.Source Connector
     collect data and send into kakfa topic    
2.Sink connectors
     COllect data from the kafka topic and send to other systems.

Implementation:

 Apache Kafka with file system 
 
How to move data from the file system to topic
.....................................................................................
				Connect implementation
.....................................................................................

Steps:
 1.Start zookeeper if you want 
 2.Start Kakfa broker with kraft mode.
 
Connect Server:
 if you want start Connect server we can start in two mode

1.standalone mode
2.distributed mode

config files for connect server

/config/connect-standalone.properties

Basic configuration:

bootstrap.servers=localhost:9092
  This connect server is going to connect which kafka brokers

key.converter=org.apache.kafka.connect.json.JsonConverter
value.converter=org.apache.kafka.connect.json.JsonConverter

  The connect will convert events into json 
 
plugins:
 list of jar files

1.connect jar files
2.any dependency jar files

plugin.path=libs/connect-file-3.5.0.jar

 Connect server looks the plugin.path to activate "connectors"

connectors:
 connect-file-3.5.0.jar - to read data from the disk file and transfer data into kafka topic.

If you are read data from the file system, you need to have some other configuration.

if you are using source connector

config/connect-file-source.properties

name=local-file-source
connector.class=FileStreamSource
tasks.max=1
file=test.txt
topic=connect-test

if you are using sink connector

config/connect-file-sink.properties

name=local-file-sink
connector.class=FileStreamSink
tasks.max=1
file=test.sink.txt
topics=connect-test

Steps:

0.create test.txt file and keep some data
 echo -e "hello" > test.txt
>File would have been created in the root kafka folder.

1.start zookeeper / kraft
2.start broker server
3.start connect server



1. ./bin/zookeeper-server-start.sh config/zookeeper.properties
2 ./bin/kafka-server-start.sh config/server.properties
3 ./bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties

Testing:
4. ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic connect-test --from-beginning
....................................................................................
			  Confluent Platform
.....................................................................................

Confluent is basically a company who gives enterprise "Kafka Platform",Confluent kafka.

Confluent kafka is abstraction on the top of apache kafka.

Confluent Kafka provides various production ready features.

There are two major deployments
 -Cloud
 -Self Managed

Self managed:

Choose An Installation Type
   Install Confluent Platform on a single local machine by using ZIP or TAR archives or Docker images.

Local
  -zip - windows
  -tar -  linux
  -docker 
Distributed
  -Kubernets
  -Ansible Playbooks


Step:

https://www.confluent.io/get-started/

curl -O https://packages.confluent.io/archive/7.4/confluent-7.4.1.tar.gz

tar xzf confluent-7.4.1.tar.gz

Folder	Description
/bin/	Driver scripts for starting and stopping services
/etc/	Configuration files
/lib/	Systemd services
/libexec/	Multi-platform CLI binaries
/share/	Jars and licenses
/src/	Source files that require a platform-dependent build

Optionally configure CONFLUENT_HOME

export CONFLUENT_HOME=<The directory where Confluent is installed>
eg:
export CONFLUENT_HOME=/home/subugee/confluent-7.4.1

export PATH=$PATH:$CONFLUENT_HOME/bin

..............

How to use Confluent tool?

./confluent --help
Manage your Confluent Cloud or Confluent Platform. Log in to see all available commands.

Usage:
  confluent [command]

Available Commands:
  cloud-signup    Sign up for Confluent Cloud.
  completion      Print shell completion code.
  context         Manage CLI configuration contexts.
  help            Help about any command
  kafka           Manage Apache Kafka.
  local           Manage a local Confluent Platform development environment.
  login           Log in to Confluent Cloud or Confluent Platform.
  logout          Log out of Confluent Cloud or Confluent Platform.
  plugin          Manage Confluent plugins.
  prompt          Add Confluent CLI context to your terminal prompt.
  secret          Manage secrets for Confluent Platform.
  shell           Start an interactive shell.
  version         Show version of the Confluent CLI.

Flags:
      --version         Show version of the Confluent CLI.
  -h, --help            Show help for this command.
      --unsafe-trace    Equivalent to -vvvv, but also log HTTP requests and responses which may contain plaintext secrets.
  -v, --verbose count   Increase verbosity (-v for warn, -vv for info, -vvv for debug, -vvvv for trace).

Use "confluent [command] --help" for more information about a command.

Confluent platform is used in two mode

1.local mode - dev,testing
2.prod mode -production mode

if you are going to use confluent local,the command starts like below

./confluent local --help
Use the "confluent local" commands to try out Confluent Platform by running a single-node instance locally on your machine. Keep in mind, these commands require Java to run.

Usage:
  confluent local [command]

Available Commands:
  current     Get the path of the current Confluent run.
  destroy     Delete the data and logs for the current Confluent run.
  services    Manage Confluent Platform services.
  version     Print the Confluent Platform version.

Global Flags:
  -h, --help            Show help for this command.
      --unsafe-trace    Equivalent to -vvvv, but also log HTTP requests and responses which may contain plaintext secrets.
  -v, --verbose count   Increase verbosity (-v for warn, -vv for info, -vvv for debug, -vvvv for trace).

Use "confluent local [command] --help" for more information about a command.

How to reset existing confluent stack?

./confluent local destroy

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

Services :
  To start zookeeper,kafka broker,........

./confluent local services --help
Manage Confluent Platform services.

Usage:
  confluent local services [command]

Available Commands:
  connect         Manage Connect.
  control-center  Manage Control Center.
  kafka           Manage Apache Kafka®.
  kafka-rest      Manage Kafka REST.
  ksql-server     Manage ksqlDB Server.
  list            List all Confluent Platform services.
  schema-registry Manage Schema Registry.
  start           Start all Confluent Platform services.
  status          Check the status of all Confluent Platform services.
  stop            Stop all Confluent Platform services.
  top             View resource usage for all Confluent Platform services.
  zookeeper       Manage Apache ZooKeeper™.

How to start Confluent Platform services?

./confluent local services start
The local commands are intended for a single-node development environment only, NOT for production usage. See more: https://docs.confluent.io/current/cli/index.html
As of Confluent Platform 8.0, Java 8 is no longer supported.

Using CONFLUENT_CURRENT: /tmp/confluent.629193
Starting ZooKeeper
ZooKeeper is [UP]
Starting Kafka
Kafka is [UP]
Starting Schema Registry
Schema Registry is [UP]
Starting Kafka REST
Kafka REST is [UP]
Starting Connect
Connect is [UP]
Starting ksqlDB Server
ksqlDB Server is [UP]
Starting Control Center
Control Center is [UP]
.....................................................................................
How to use confluent platform?

Like :
 How to interact with kafka broker for create,publish,consume messages

There are two ways

1.Using gui tools
http://localhost:9021/clusters
2.Using cli tools
....................................................................................
				Confulent Connect
....................................................................................

JDBC Connectors:
1.JDBC Source Connector
   Database to Kafka topic
2.JDBC Sink connector
   Kafka topic to Database.

What is jdbc connector?
  Jdbc connector is just jar file

In order to install jdbc connector into confluent platform we have two ways

1.manuall installation
2.via confulent hub client cli tool

Req:
 1.jdbc connector
 2.What database you are going to connect for mysql or postgresql,mssql,monogodb   etc..
   you need driver jar file

HUB URL:
https://www.confluent.io/hub/

JDBC Connector (Source and Sink)



confluent-hub install confluentinc/kafka-connect-jdbc:10.7.3

confluent-hub install confluentinc/kafka-connect-jdbc:10.7.3
The component can be installed in any of the following Confluent Platform installations:
  1. /home/subu/confluent-7.4.1 (based on $CONFLUENT_HOME)
  2. /home/subu/confluent-7.4.1 (where this tool is installed)
Choose one of these to continue the installation (1-2): 1
Do you want to install this into /home/subu/confluent-7.4.1/share/confluent-hub-components? (yN) y


Component's license:
Confluent Community License
https://www.confluent.io/confluent-community-license
I agree to the software license agreement (yN) y

Downloading component Kafka Connect JDBC 10.7.3, provided by Confluent, Inc. from Confluent Hub and installing into /home/subu/confluent-7.4.1/share/confluent-hub-components
Detected Worker's configs:
  1. Standard: /home/subu/confluent-7.4.1/etc/kafka/connect-distributed.properties
  2. Standard: /home/subu/confluent-7.4.1/etc/kafka/connect-standalone.properties
  3. Standard: /home/subu/confluent-7.4.1/etc/schema-registry/connect-avro-distributed.properties
  4. Standard: /home/subu/confluent-7.4.1/etc/schema-registry/connect-avro-standalone.properties
Do you want to update all detected configs? (yN) y

Adding installation directory to plugin path in the following files:
  /home/subu/confluent-7.4.1/etc/kafka/connect-distributed.properties
  /home/subu/confluent-7.4.1/etc/kafka/connect-standalone.properties
  /home/subu/confluent-7.4.1/etc/schema-registry/connect-avro-distributed.properties
  /home/subu/confluent-7.4.1/etc/schema-registry/connect-avro-standalone.properties

Completed

We need to ensure the jdbc driver files , must have been placed in the same location.

 /home\subu\confluent-7.4.1\share\confluent-hub-components\confluentinc-kafka-connect-jdbc\lib\mysql-connector-java-8.0.16.jar

After installing make sure /etc/kafka/server.properties files are having the below configuration

listeners=PLAINTEXT://localhost:9092

# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
advertised.listeners=PLAINTEXT://localhost:9092

make sure that kafka-connect-jdbc-10.7.3.jar file is available 

home\subu\confluent-7.4.1\share\confluent-hub-components\confluentinc-kafka-connect-jdbc\lib

copy jdbc driver files also inthe same location.

home\subu\confluent-7.4.1\share\confluent-hub-components\confluentinc-kafka-connect-jdbc\lib

mysql-connector-java-8.0.16.jar
..................................................................................

Make sure that etc/kafka/connect-standalone.properties

plugin.path=/home/subu/confluent-7.4.1/share/confluent-hub-components

the above configuration is mapped.
..................................................................................

We have to start database: Mysql.

Start mysql server:
 This mysql server contains ready made database called inventory.
docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:2.3

start Mysql client utilty
 docker run -it --rm --name mysqlterm --link mysql --rm mysql:8.0 sh -c 'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| inventory          |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

Change database

mysql> use inventory
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed

mysql> show tables;
+---------------------+
| Tables_in_inventory |
+---------------------+
| addresses           |
| customers           |
| geom                |
| orders              |
| products            |
| products_on_hand    |
+---------------------+
6 rows in set (0.00 sec)
mysql> select *from orders;
+--------------+------------+-----------+----------+------------+
| order_number | order_date | purchaser | quantity | product_id |
+--------------+------------+-----------+----------+------------+
|        10001 | 2016-01-16 |      1001 |        1 |        102 |
|        10002 | 2016-01-17 |      1002 |        2 |        105 |
|        10003 | 2016-02-19 |      1002 |        2 |        106 |
|        10004 | 2016-02-21 |      1003 |        1 |        107 |
+--------------+------------+-----------+----------+------------+
4 rows in set (0.00 sec)

mysql> select *from customers;
+------+------------+-----------+-----------------------+
| id   | first_name | last_name | email                 |
+------+------------+-----------+-----------------------+
| 1001 | Sally      | Thomas    | sally.thomas@acme.com |
| 1002 | George     | Bailey    | gbailey@foobar.com    |
| 1003 | Edward     | Walker    | ed@walker.com         |
| 1004 | Anne       | Kretchmar | annek@noanswer.org    |
+------+------------+-----------+-----------------------+
4 rows in set (0.00 sec)

................

Start/Restart all confluent services
.....................................................................................

We have done so far

1.we have installed connector jars and jdbc drivers
2.we have started database -mysql

Now we need to start pushing data from mysql database to kafka.

We need to push "configuration" to connect service(server)

 Do you remember we have used "connect-file-source.properties" which configuration.

instead of having separate configuration file, we can push to connect server via 
GUI tool or curl utility. it should be HTTP post call.

Basic connector configuration:
{
  "name": "JdbcSourceConnectorConnector_0",
  "config": {
    "name": "JdbcSourceConnectorConnector_0",
    "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",
    "connection.url": "jdbc:mysql://127.0.0.1:3306/inventory?verifyServerCertificate=false&useSSL=true&requireSSL=true",
    "connection.user": "debezium",
    "connection.password": "***",
    "mode": "bulk"
  }
}

How to push the above configuration to connect server?

http://localhost:9021/clusters/I3jfof3mQDCHEkX8SZMCww/management/connect/connect-default/connectors

Go to connect option

 Select "connect-defalut"
	YOu can find connectors
   
 click--->   JDBCSourceconnector --> Add configuration and lanuch,, 

You can see now the data started moving from database to kafka topics.
.....................................................................................
			 CDC -Change Data Capture
.....................................................................................

What is CDC ?
  	Change data capture (CDC) refers to the tracking of all changes in a data source (databases, data warehouses, etc.) so they can be captured in destination systems.

	In short, CDC allows organizations to achieve data integrity and consistency across all systems and deployment environments. 

	Additionally, it allows organizations to use the right tool for the right job by moving data from legacy databases to purpose-built data platforms, such as document or search databases and data warehouses.

What is Debezium?
 Debezium is an open source distributed platform for change data capture. Start it up, point it at your databases, and your apps can start responding to all of the inserts, updates, and deletes that other apps commit to your databases. Debezium is durable and fast, so your apps can respond quickly and never miss an event, even when things go wrong.


Debeizum Architecture:

Source connectors such as Debezium that send records into Kafka

Sink connectors that propagate records from Kafka topics to other systems

...................................................................................
		  CDC implementation using Debezium with MySQL
...................................................................................

Setup:

1.You can use local confluent platform
2.You can use docker setup
3.You can use confluent cloud platorm - 0- installation.


Docker setup:
2.you can use docker compose or indiduval docker commands.

Start Zookeeper

Start Kafka

Start a MySQL database

Start a MySQL command line client

Start Kafka Connect

This tutorial uses Docker and the Debezium container images to run the ZooKeeper, Kafka, Debezium, and MySQL services. 

$ docker run -it --rm --name zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 quay.io/debezium/zookeeper:2.3

$ docker run -it --rm --name kafka -p 9092:9092 --link zookeeper:zookeeper quay.io/debezium/kafka:2.3

$ docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:2.3

$ docker run -it --rm --name mysqlterm --link mysql --rm mysql:8.0 sh -c 'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'

docker run -it --rm --name connect -p 8083:8083 -e GROUP_ID=1 -e CONFIG_STORAGE_TOPIC=my_connect_configs -e OFFSET_STORAGE_TOPIC=my_connect_offsets -e STATUS_STORAGE_TOPIC=my_connect_statuses --link kafka:kafka --link mysql:mysql quay.io/debezium/connect:2.3

After running:

Test connector service is running or not.

$ curl -H "Accept:application/json" localhost:8083/
{"version":"3.4.0","commit":"cb8625948210849f"} 


$ curl -H "Accept:application/json" localhost:8083/connectors/
[] 

Deploying the MySQL connector

After starting the Debezium and MySQL services, you are ready to deploy the Debezium MySQL connector so that it can start monitoring the sample MySQL database (inventory).

At this point, you are running the Debezium services, a MySQL database server with a sample inventory database, and the MySQL command line client that is connected to the database. To deploy the MySQL connector, you must:

Register the MySQL connector to monitor the inventory database

After the connector is registered, it will start monitoring the database server’s binlog and it will generate change events for each row that changes.

Watch the MySQL connector start

Reviewing the Kafka Connect log output as the connector starts helps you to better understand each task it must complete before it can start monitoring the binlog.

What is binlog?
  binary log

The binary log contains “events” that describe database changes such as table creation operations or changes to table data. It also contains events for statements that potentially could have made changes (for example, a DELETE which matched no rows), unless row-based logging is used.

Note:
In a production environment, you would typically either use the Kafka tools to manually create the necessary topics, including specifying the number of replicas, or you’d use the Kafka Connect mechanism for customizing the settings of auto-created topics. However, for this tutorial, Kafka is configured to automatically create the topics with just one replica.

Procedure:
Review the configuration of the Debezium MySQL connector that you will register.

Before registering the connector, you should be familiar with its configuration. In the next step, you will register the following connector:

{
  "name": "inventory-connector",  
  "config": {  
    "connector.class": "io.debezium.connector.mysql.MySqlConnector",
    "tasks.max": "1",  
    "database.hostname": "mysql",  
    "database.port": "3306",
    "database.user": "debezium",
    "database.password": "dbz",
    "database.server.id": "184054",  
    "topic.prefix": "dbserver1",  
    "database.include.list": "inventory",  
    "schema.history.internal.kafka.bootstrap.servers": "kafka:9092",  
    "schema.history.internal.kafka.topic": "schema-changes.inventory"  
  }
}

2.Open a new terminal, and use the curl command to register the Debezium MySQL connector.

Note: use git bash 

$ curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d '{ "name": "inventory-connector", "config": { "connector.class": "io.debezium.connector.mysql.MySqlConnector", "tasks.max": "1", "database.hostname": "mysql", "database.port": "3306", "database.user": "debezium", "database.password": "dbz", "database.server.id": "184054", "topic.prefix": "dbserver1", "database.include.list": "inventory", "schema.history.internal.kafka.bootstrap.servers": "kafka:9092", "schema.history.internal.kafka.topic": "schemahistory.inventory" } }'

After installing :
Test
http://localhost:8083/connectors/

Response:
[
"inventory-connector"
]

http://localhost:8083/connectors/inventory-connector

{
name: "inventory-connector",
config: {
connector.class: "io.debezium.connector.mysql.MySqlConnector",
database.user: "debezium",
topic.prefix: "dbserver1",
schema.history.internal.kafka.topic: "schemahistory.inventory",
database.server.id: "184054",
tasks.max: "1",
database.hostname: "mysql",
database.password: "dbz",
name: "inventory-connector",
schema.history.internal.kafka.bootstrap.servers: "kafka:9092",
database.port: "3306",
database.include.list: "inventory"
},
tasks: [
{
connector: "inventory-connector",
task: 0
}
],
type: "source"
}

Viewing change events
After deploying the Debezium MySQL connector, it starts monitoring the inventory database for data change events.

Viewing a create event

Updating the database and viewing the update event

Deleting a record in the database and viewing the delete event

Restarting Kafka Connect and changing the database

$ docker run -it --rm --name watcher --link zookeeper:zookeeper --link kafka:kafka quay.io/debezium/kafka:2.3 watch-topic -a -k dbserver1.inventory.customers


...

Watch inside docker terminal changes
in the topic
./kafka-topics.sh --list --bootstrap-server 172.17.0.1:9092
__consumer_offsets
dbserver1
dbserver1.inventory.addresses
dbserver1.inventory.customers
dbserver1.inventory.geom
dbserver1.inventory.orders
dbserver1.inventory.products
dbserver1.inventory.products_on_hand
my_connect_configs
my_connect_offsets
my_connect_statuses
schemahistory.inventory

 ./kafka-topics.sh --topic  dbserver1.inventory.customers --describe --bootstrap-server 172.17.0.1:9092
Topic: dbserver1.inventory.customers    TopicId: G6hEi6d5ThKpKwjGxl-Ujg PartitionCount: 1       ReplicationFactor: 1    Configs: 
        Topic: dbserver1.inventory.customers    Partition: 0    Leader: 1       Replicas: 1     Isr: 1

./kafka-console-consumer.sh  --bootstrap-server 172.17.0.1:9092 --topic dbserver1.inventory.customers --from-beginning

Watching:
Updating the databases and viewing the update event.

h-5.2$ ls
LICENSE  NOTICE  bin  config  config.orig  data  libs  licenses  logs
sh-5.2$ cd bin
sh-5.2$ ls
connect-distributed.sh        kafka-console-producer.sh    kafka-leader-election.sh       kafka-run-class.sh                  kafka-verifiable-producer.sh
connect-mirror-maker.sh       kafka-consumer-groups.sh     kafka-log-dirs.sh              kafka-server-start.sh               trogdor.sh
connect-standalone.sh         kafka-consumer-perf-test.sh  kafka-metadata-quorum.sh       kafka-server-stop.sh                windows
kafka-acls.sh                 kafka-delegation-tokens.sh   kafka-metadata-shell.sh        kafka-storage.sh                    zookeeper-security-migration.sh
kafka-broker-api-versions.sh  kafka-delete-records.sh      kafka-mirror-maker.sh          kafka-streams-application-reset.sh  zookeeper-server-start.sh
kafka-cluster.sh              kafka-dump-log.sh            kafka-producer-perf-test.sh    kafka-topics.sh                     zookeeper-server-stop.sh
kafka-configs.sh              kafka-features.sh            kafka-reassign-partitions.sh   kafka-transactions.sh               zookeeper-shell.sh
kafka-console-consumer.sh     kafka-get-offsets.sh         kafka-replica-verification.sh  kafka-verifiable-consumer.sh
sh-5.2$ kafka-topics.sh --list --bootstrap-server 172.17.0.1:9092
sh: kafka-topics.sh: command not found
sh-5.2$ ./kafka-topics.sh --list --bootstrap-server 172.17.0.1:9092
__consumer_offsets
dbserver1
dbserver1.inventory.addresses
dbserver1.inventory.customers
dbserver1.inventory.geom
dbserver1.inventory.orders
dbserver1.inventory.products
dbserver1.inventory.products_on_hand
my_connect_configs
my_connect_offsets
my_connect_statuses
schemahistory.inventory
sh-5.2$ 

Clean up:
docker stop mysqlterm watcher connect mysql kafka zookeeper
mysqlterm
watcher
connect
mysql
kafka
zookeeper

















